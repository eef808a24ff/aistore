linters:
  enable-all: false
  disable-all: true
  enable:
    - asciicheck
    - bodyclose
    - deadcode
    - errcheck
    - exportloopref
    - gci
    - gocritic
    - gofmt
    - gofumpt
    - goheader
    - goimports
    - golint
    - goprintffuncname
    - gosimple
    - govet
    - ineffassign
    - interfacer
    - maligned
    - misspell
    - nolintlint
    - prealloc
    - staticcheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - varcheck
    - whitespace

    # See: https://golangci-lint.run/usage/linters/
    #
    # Following linters produce false positives (enable only when needed):
    # - goerr113
    # - gosec
    # - nestif
    # - scopelint
    # - structcheck - doesn't handle embedded structs
    #
    # Following linters are not really helpful:
    # - exhaustive
    # - nlreturn
    # - testpackage

linters-settings:
  govet:
    disable:
      - shadow # reports a lot of false-positives and conflicts with other linters
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/NVIDIA/aistore/3rdparty/glog).Infof
          - (github.com/NVIDIA/aistore/3rdparty/glog).Warningf
          - (github.com/NVIDIA/aistore/3rdparty/glog).Errorf
          - (github.com/NVIDIA/aistore/3rdparty/glog).Fatalf
          - (github.com/NVIDIA/tutils/tassert).Errorf
          - (github.com/NVIDIA/tutils/tassert).Fatalf
          - (github.com/NVIDIA/cmn/debug).Assertf
          - (github.com/NVIDIA/cmn/debug).Errorf
          - (github.com/NVIDIA/cmn/debug).Infof
          - (github.com/NVIDIA/cmn).Exitf
          - (github.com/NVIDIA/cmn).ExitLogf
  golint:
    min-confidence: 0
  errcheck:
    check-blank: true
    check-type-assertions: false
  gocritic:
    enabled-tags:
      - performance
      - style
      - experimental
    disabled-checks:
      - ifElseChain
      - hugeParam # produces a lot of false-positives (TODO: see if some errors are possible improvements)
      - unnamedResult
  prealloc:
    simple: true # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: true # Report preallocation suggestions on for loops, false by default
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US

issues:
  # use default exclude rules
  exclude-use-default: true

  # additional exclude rules
  exclude-rules:
    - linters: golint
      text: "error should be the last type when returning multiple items" # ignores 'return body, err, errCode'

    - linters: errcheck
      text: "Error return value of" # ignores 'error return value of ... is unchecked'

    - linters: golint
      text: "and that stutters; consider calling this"

    - linters: golint
      text: "don't use an underscore in package name"

    - linters: unused
      text: "`noCopy` is unused"

    - linters: gocritic
      text: "importShadow: shadow of imported"

    - linters: gocritic
      text: "builtinShadow: shadowing of predeclared identifier: new"

    - linters: gocritic
      source: "///" # commentFormatting

    - linters: gocritic
      source: "//==" # commentFormatting

    - linters: staticcheck
      text: "SA5011:" # produces a lot of false-positives; hopefully in the future we could enable it!

    - linters: interfacer
      text: "k8s.io/client-go/rest.HTTPClient" # suggests to change `*http.Client` to `rest.HTTPClient`...

  # Set to 0 to disable limit
  max-same-issues: 0
  max-per-linter: 0

run:
  tests: true # enable linting test files

  build-tags:
    - hrw aws azure gcp # build hrw and aws so that staticcheck doesn't complain about unused export functions

  concurrency: 4
  deadline: 5m
