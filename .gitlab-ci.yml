image: aistore/ci:1.13

stages:
  - build
  - test-short
  - test-long

variables:
  AIS_NODE_FLAGS: "-skip_startup"
  MODE: debug # run tests with debug asserts
  NUM_TARGET: 5
  NUM_PROXY: 5
  FS_CNT: 3


# Templates

.default_only_template: &default_only_def
  only:
    - master
    - merge_requests
    - schedules

.default_ref_template: &default_ref_def
  <<: *default_only_def
  except:
    variables:
      - $CI_MERGE_REQUEST_LABELS =~ /.*skip-ci.*/

.test_long_template: &test_long_def
  stage: test-long
  only:
    - schedules
  after_script:
    - mkdir $CI_PROJECT_DIR/logs
    - find /tmp/ais -type f -name "*log*" -exec cp {} $CI_PROJECT_DIR/logs/ \;
  artifacts:
    when: on_failure
    paths: [logs/]
    expire_in: 2 days

.test_kube_template: &test_kube_def
  variables:
    AIS_ENDPOINT: "localhost:8080"
    K8S_HOST_NAME: "minikube" # WARNING: this is essential for podAffinity to work.
    NUM_TARGET: 1
    NUM_PROXY: 1
  tags:
    - ais-kube
  before_script:
    - kubectl get pods | awk '/tar2tf|echo|minikube/{print $1}' | xargs -r kubectl delete pod # TODO: this can be removed once the lifecycle of transformers is implemented.
    - kubectl get svc | awk '/tar2tf|echo|minikube/{print $1}' | xargs -r kubectl delete svc # TODO: this can be removed once the lifecycle of transformers is implemented.



# Stages

build:linux:
  stage: build
  <<: *default_only_def
  script:
    - AIS_CLD_PROVIDERS="ais aws gcp azure" make node
    - AIS_CLD_PROVIDERS="" MODE="" make node # build one node without debug assert (to see if it compiles)
    - make authn
    - make aisfs
    - make cli
    - make aisloader

lint:linux:
  stage: build
  <<: *default_only_def
  script:
    - make lint
    - make fmt-check
    - make spell-check

test:short:
  stage: test-short
  <<: *default_ref_def
  timeout: 15m
  script:
    - make aisfs cli aisloader
    - make deploy <<< $({ echo $NUM_TARGET; echo $NUM_PROXY; echo $FS_CNT; echo n; echo n; echo n; })
    - DEPLOY_AS_NEXT_TIER="true" make deploy <<< $'1\n1\n3\nn\nn\nn\n'
    - sleep 3
    - ais attach remote alias=http://127.0.0.1:11080 # attach to remote cluster
    - BUCKET="test" make test-short
    - FLAGS="--duration=10s" make test-aisloader

test:authn:
  stage: test-short
  only:
    - schedules
  variables:
    AUTH_ENABLED: "true"
    AUTHN_URL: "http://localhost:52001"
    AUTHN_SU_NAME: "admin"
    AUTHN_SU_PASS: "admin"
  script:
    - make cli
    - make deploy <<< $({ echo $NUM_TARGET; echo $NUM_PROXY; echo $FS_CNT; echo n; echo n; echo n; })
    - ais auth login $AUTHN_SU_NAME -p $AUTHN_SU_PASS
    - BUCKET="test" RE="TestAuth" make test-run
    - ais auth logout

test:https:
  stage: test-short
  only:
    - schedules
  variables:
    AIS_ENDPOINT: "https://localhost:8080"
    AIS_USE_HTTPS: "true"
    AIS_SERVER_CRT: "$CI_PROJECT_DIR/localhost.crt"
    AIS_SERVER_KEY: "$CI_PROJECT_DIR/localhost.key"
    AIS_SKIP_VERIFY_CRT: "true"
  script:
    - openssl req -x509 -out $AIS_SERVER_CRT -keyout $AIS_SERVER_KEY -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' -extensions EXT -config <( printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")
    - make aisfs cli
    - make deploy <<< $({ echo $NUM_TARGET; echo $NUM_PROXY; echo $FS_CNT; echo n; echo n; echo n; })
    - DEPLOY_AS_NEXT_TIER="true" make deploy <<< $'1\n1\n3\nn\nn\nn\n'
    - sleep 3
    - ais attach remote alias=https://127.0.0.1:11080 # attach to remote cluster
    - BUCKET="test" make test-short

test:long:
  <<: *test_long_def
  variables:
    NUM_PROXY: 6
  script:
    - make deploy <<< $({ echo $NUM_TARGET; echo $NUM_PROXY; echo $FS_CNT; echo n; echo n; echo n; })
    - BUCKET="test" make test-long

test:cloud:
  <<: *test_long_def
  variables:
    AWS_REGION: "us-east-2"
    GOOGLE_APPLICATION_CREDENTIALS: "/tmp/gcs.json"
    NUM_PROXY: 6
  script:
    - echo "${GOOGLE_APPLICATION_CREDENTIALS_JSON}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
    - make deploy <<< $({ echo $NUM_TARGET; echo $NUM_PROXY; echo $FS_CNT; echo y; echo y; echo n; })
    - BUCKET="gs://ais-ci" make test-long
    - BUCKET="aws://ais-ci" make test-long

test:soak:
  stage: test-long
  only:
    - schedules
  script:
    - make aisloader
    - make deploy <<< $({ echo $NUM_TARGET; echo $NUM_PROXY; echo $FS_CNT; echo n; echo n; echo n; })
    - FLAGS="--short --rec-cycles=1" make test-soak

test:aisloader:
  stage: test-long
  only:
    - schedules
  script:
    - make aisloader
    - make deploy <<< $({ echo $NUM_TARGET; echo $NUM_PROXY; echo $FS_CNT; echo n; echo n; echo n; })
    - sleep 10 # make sure that cluster properly starts
    - FLAGS="--duration=5m" make test-aisloader

# TODO: The job is for now disabled because it gets stuck on memsys benchmarks.
#test:bench:
#  stage: test-long
#  only:
#    - schedules
#  script:
#    - go get -u golang.org/x/tools/cmd/benchcmp
#    - make test-bench


# Kubernetes stages

test:kube-short:
  <<: *test_kube_def
  stage: test-short
  only:
    - merge_requests
  except:
    variables:
      - $CI_MERGE_REQUEST_LABELS =~ /.*skip-ci.*/
  script:
    - make deploy <<< $({ echo $NUM_TARGET; echo $NUM_PROXY; echo $FS_CNT; echo n; echo n; echo n;  })
    - status=0
    - BUCKET="test" RE="TestETL" make test-short || status=$?
    - make kill
    - exit $status # TODO: hack to prevent pod hangs on failures

test:kube:
  <<: *test_kube_def
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*kube-ci.*/' # Add more labels if needed in the future
  stage: test-long
  script:
    - make deploy <<< $({ echo $NUM_TARGET; echo $NUM_PROXY; echo $FS_CNT; echo n; echo n; echo n; })
    - status=0
    - BUCKET="test" RE="TestETL" make test-run || status=$?
    - make kill
    - exit $status # TODO: hack to prevent pod hangs on failures

test:kube-aisloader:
  <<: *test_kube_def
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*kube-ci.*/' # Add more labels if needed in the future
  stage: test-long
  script:
    - make aisloader
    - make deploy <<< $({ echo $NUM_TARGET; echo $NUM_PROXY; echo $FS_CNT; echo n; echo n; echo n; })
    - status=0
    - BUCKET="test" FLAGS="--duration=2m --etl" make test-aisloader || status=$?
    - make kill
    - exit $status # TODO: hack to prevent pod hangs on failures
